{
    "Comment": "A state machine that does mock stock trading.",
    "StartAt": "getUrls",
    "States": {
        "getUrls": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${GetUrlsFunctionArn}"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ],
            "Next": "updateOrNot?"
        },
        "updateOrNot?": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.state",
                    "BooleanEquals": true,
                    "Next": "htmlParsing"
                },
                {
                    "Variable": "$.state",
                    "BooleanEquals": false,
                    "Next": "Pass"
                }
            ]
        },
        "Pass": {
            "Type": "Pass",
            "End": true
        },
        "htmlParsing": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${HtmlParsingFunctionArn}"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ],
            "Next": "createBatch"
        },
        "createBatch": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${CreateBatchFunctionArn}"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ],
            "Next": "batchSuccess"
        },
        "batchSuccess": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.state",
                    "BooleanEquals": true,
                    "Next": "checkEmbedding"
                },
                {
                    "Variable": "$.state",
                    "BooleanEquals": false,
                    "Next": "transVector"
                }
            ]
        },
        "checkEmbedding": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${CheckEmbeddingFunctionArn}"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ],
            "Next": "IfEmbeddingDone"
        },
        "IfEmbeddingDone": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.state",
                    "BooleanEquals": true,
                    "Next": "transVector"
                },
                {
                    "And": [
                        {
                            "Variable": "$.state",
                            "BooleanEquals": false
                        },
                        {
                            "Variable": "$.cnt",
                            "NumericLessThanEquals": 30
                        }
                    ],
                    "Next": "30sec Wait"
                },
                {
                    "And": [
                        {
                            "Variable": "$.state",
                            "BooleanEquals": false
                        },
                        {
                            "Variable": "$.cnt",
                            "NumericGreaterThan": 30
                        }
                    ],
                    "Next": "CancelBatch"
                }
            ]
        },
        "30sec Wait": {
            "Type": "Wait",
            "Seconds": 60,
            "Next": "checkEmbedding"
        },
        "CancelBatch": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${CancelBatchFunctionArn}"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ],
            "Next": "createBatch"
        },
        "transVector": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${TransVectorFunctionArn}"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ],
            "Next": "updateVectorDB"
        },
        "updateVectorDB": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${UpdateVectorDBFunctionArn}"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ],
            "Next": "Success"
        },
        "Success": {
            "Type": "Succeed"
        }
    }
}